declaration             = "var" IDENT type_annotation [ ":=" expression ] ";";
type_annotation         = TYPE_NAME [ "<" type_annotation { "," type_annotation } ">" ];
expression              = logical_or;
logical_or              = logical_and { "||" logical_and };
logical_and             = equality { "&&" equality };
equality                = comparison { ("==" | "!=") comparison };
comparison              = additive { ("<" | ">" | "<=" | ">=") additive };
additive                = multiplicative { ("+" | "-") multiplicative };
multiplicative          = unary { ("*" | "/") unary };
unary                   = [ "!" | "-" ] primary;
primary                 = NUMBER | BOOLEAN | IDENT | list | "(" expression ")" ;
list                    = "[" [ expression { "," expression } ] "]";
if_statement            = "if" "(" expression ")" block [ else_clause ];
else_clause             = "else" (if_statement | block);
block                   = "{" { statement } "}";
statement               = declaration | if_statement | expression_statement | assignment_statement;
expression_statement    = expression ";";
assignment_statement    = IDENT "=" expression ";" ;

IDENT                   = letter { letter | digit | "_" };
TYPE_NAME               = upper_letter { letter | digit | "_" };
NUMBER                  = [ "-" ] digit { digit } [ "." digit { digit } ] [ "e" [ "-" | "+" ] digit { digit } ];
BOOLEAN                 = "true" | "false";
letter                  = "a".."z" | "A".."Z";
upper_letter            = "A".."Z";
digit                   = "0".."9";
STRING                  = '"' { character - '"' | escape_sequence } '"';
escape_sequence         = '\\' ( '"' | '\\' | 'n' | 't' ) ;